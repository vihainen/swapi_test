{"version":3,"sources":["components/MGLTInput.js","components/StarshipJumpCard.js","components/StarshipJumps.js","App.js","serviceWorker.js","index.js"],"names":["MGLTInput","props","calcState","oldMGLT","replace","MGLT","isNaN","slice","includes","split","join","value","onChangeHandler","target","newState","onChange","setState","state","defaultValue","toString","className","this","React","Component","defaultProps","StarshipJumpCard","useState","fullInfo","showFullInfo","toHours","type","startsWith","isClassified","onClick","e","jumps","ship","consumables","Math","floor","distance","model","name","crew","buildContent","StarshipJumps","showPlaceholder","placeholder","cards","index","ships","push","key","App","setMGLT","isFetching","data","setData","useEffect","fetchAllPages","a","async","response","fetch","next","json","results","console","error","fetchShipData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.522f6e80.chunk.js","sourcesContent":["import React from 'react';\nimport './MGLTInput.css';\n\nclass MGLTInput extends React.Component {\n    static defaultProps = {\n        defaultValue: '',\n        onChange: () => {}\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = this.calcState(this.props.defaultValue.toString())\n    }\n\n    calcState = oldMGLT => {\n        oldMGLT = oldMGLT.replace(/\\s/g, '') //convert back from display value\n        oldMGLT = isNaN(oldMGLT)? oldMGLT.slice(0, -1) : oldMGLT //number validation \n\n        //format number for display\n        let MGLT\n        if(oldMGLT.includes('.')) MGLT = oldMGLT.split(/(?=(?:...)*...\\.)/).join(' ')\n        else MGLT = oldMGLT.split(/(?=(?:...)*$)/).join(' ')\n\n        return {MGLT, value: +oldMGLT}\n    }\n\n    onChangeHandler = ({target: {value}}) => {\n        const newState = this.calcState(value)\n        this.props.onChange(newState.value)\n        this.setState(newState)\n    }\n\n    render() {\n        return (\n            <div className=\"MGLTInput\">\n                <input\n                    value={this.state.MGLT}\n                    onChange={this.onChangeHandler}\n                />\n                <span>MGLT</span>\n            </div>\n        )\n    }\n}\n\nexport default MGLTInput;\n","import React, {useState} from 'react'\n\nfunction StarshipJumpCard(props) {\n    const [fullInfo, showFullInfo] = useState(false)\n    const classified = 'unknown'\n\n    const toHours = (value, type) =>\n        type.startsWith('year')? toHours(value*12, 'month')\n      : type.startsWith('month')? toHours(value*30, 'day')\n      : type.startsWith('week')? toHours(value*7, 'day')\n      : type.startsWith('day')? value*24\n      : value\n\n    const isClassified = value => value === classified\n\n    const calcJumps = () => {\n        if(isClassified(props.ship.MGLT) || isClassified(props.ship.consumables))\n            return classified\n\n        \n\n        return Math.floor(props.distance/((+props.ship.MGLT)*toHours(...props.ship.consumables.split(' '))))\n    }\n\n    const buildContent = () => {\n        const jumps = calcJumps()\n\n        if(!fullInfo) return (\n            <div>\n                <span>{props.ship.name}: {jumps}</span>\n            </div>\n        )\n        else return (\n            <div>\n                <span>{props.ship.model} \"{props.ship.name}\"</span>\n                <span>Minimum stops: {jumps}</span>\n                <span>Maximum speed: {isClassified(props.ship.MGLT)? classified : `${props.ship.MGLT} MGLT/h`}</span>\n                <span>Able to sustain crew for: {props.ship.consumables}</span>\n                <span>Minimum crew size: {isClassified(props.ship.crew)? classified : `${props.ship.crew} personnel`}</span>\n            </div>\n        )\n    }\n\n    return (\n        <div\n            className={`StarshipJumpCard${fullInfo? ' FullInfo': ''}`}\n            onClick={e => showFullInfo(!fullInfo)}\n        >\n            {buildContent()}\n        </div>\n    )\n}\n\nexport default StarshipJumpCard","import React from 'react'\nimport StarshipJumpCard from './StarshipJumpCard'\nimport './StarshipJumps.css'\n\nfunction StarshipJumps(props) {\n    const buildContent = () => {\n        if (props.showPlaceholder) return props.placeholder || \"\"\n        else {\n            let cards = []\n            for(const index in props.ships)\n                cards.push(\n                    <StarshipJumpCard\n                        key={index}\n                        ship={props.ships[index]}\n                        distance={props.MGLT}\n                    />\n                )\n            return cards\n        }\n    }\n\n    return (\n        <div className=\"StarshipJumps\">\n            {\n                buildContent()\n            }\n        </div>\n    )\n}\n\nexport default StarshipJumps","import React, {useEffect, useState} from 'react'\nimport MGLTInput from './components/MGLTInput'\nimport StarshipJumps from './components/StarshipJumps'\nimport './App.css'\n\nfunction App() {\n    const defaultMGLTValue = 1000000\n    const [MGLT, setMGLT] = useState(defaultMGLTValue)\n    const [data, setData] = useState({ships: [], isFetching: false})\n\n    useEffect(() => {\n        const API_URL = 'https://swapi.co/api/starships/'\n\n        const fetchAllPages = async () => {\n            let ships = [], response = {}\n            do {\n                response = await (await fetch(response.next || API_URL)).json()\n                ships = [...ships, ...response.results]\n            } while (response.next)\n            \n            return ships\n        }\n        \n        const fetchShipData = async () => {\n            try {\n                setData({ships: [], isFetching: true})\n                const ships = await fetchAllPages()\n                setData({ships, isFetching: false})\n            } catch (e) {\n                console.error(e)\n                setData({ships: data.ships, isFetching: false})\n            }\n        }\n        \n        fetchShipData()\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <p className='mute'>\n                    Welcome, traveler. Here you can check the minimum number of stops you will need to do for resupplying before reaching your destination, traveling at maximum speed, using each ship available in the galactic database.\n                </p>\n                <p>\n                    How far is your destination, traveler?\n                </p>\n                <MGLTInput\n                    defaultValue={defaultMGLTValue}\n                    onChange={setMGLT}\n                />\n                <p className='mute'>\n                    Click on any ship for more info.\n                </p>\n                <StarshipJumps\n                    ships={data.ships}\n                    MGLT={MGLT}\n                    placeholder=\"Querying galactic database...\"\n                    showPlaceholder={data.isFetching}\n                />\n            </header>\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}